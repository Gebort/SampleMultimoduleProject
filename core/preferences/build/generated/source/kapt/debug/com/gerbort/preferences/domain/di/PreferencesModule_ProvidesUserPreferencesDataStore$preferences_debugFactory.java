// Generated by Dagger (https://dagger.dev).
package com.gerbort.preferences.domain.di;

import android.content.Context;
import com.gerbort.preferences.domain.Preferences;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata({
    "dagger.hilt.android.qualifiers.ApplicationContext",
    "com.gerbort.common.di.Dispatcher",
    "com.gerbort.common.di.ApplicationScope"
})
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class PreferencesModule_ProvidesUserPreferencesDataStore$preferences_debugFactory implements Factory<Preferences> {
  private final Provider<Context> contextProvider;

  private final Provider<CoroutineDispatcher> ioDispatcherProvider;

  private final Provider<CoroutineScope> scopeProvider;

  public PreferencesModule_ProvidesUserPreferencesDataStore$preferences_debugFactory(
      Provider<Context> contextProvider, Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<CoroutineScope> scopeProvider) {
    this.contextProvider = contextProvider;
    this.ioDispatcherProvider = ioDispatcherProvider;
    this.scopeProvider = scopeProvider;
  }

  @Override
  public Preferences get() {
    return providesUserPreferencesDataStore$preferences_debug(contextProvider.get(), ioDispatcherProvider.get(), scopeProvider.get());
  }

  public static PreferencesModule_ProvidesUserPreferencesDataStore$preferences_debugFactory create(
      Provider<Context> contextProvider, Provider<CoroutineDispatcher> ioDispatcherProvider,
      Provider<CoroutineScope> scopeProvider) {
    return new PreferencesModule_ProvidesUserPreferencesDataStore$preferences_debugFactory(contextProvider, ioDispatcherProvider, scopeProvider);
  }

  public static Preferences providesUserPreferencesDataStore$preferences_debug(Context context,
      CoroutineDispatcher ioDispatcher, CoroutineScope scope) {
    return Preconditions.checkNotNullFromProvides(PreferencesModule.INSTANCE.providesUserPreferencesDataStore$preferences_debug(context, ioDispatcher, scope));
  }
}
